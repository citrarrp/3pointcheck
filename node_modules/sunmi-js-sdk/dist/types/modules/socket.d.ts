import { ISocketManager } from "../types/socket";
import { ModuleMessage, SendMessage } from "../types/index";
export declare class SocketManager implements ISocketManager {
    private socket;
    connected: boolean;
    eventsCallback: {
        [eventId: string]: (response: any) => void;
    };
    constructor(serverUrl?: string);
    private initializeEventListeners;
    getSocket(): WebSocket;
    sendMessage<T>(data: SendMessage<T>, callback?: (response: any) => void | null): void;
    on(event: string, callback: (...args: any[]) => void): void;
    disconnect(): void;
    /**
     * 生成唯一消息ID
     * @returns 由随机字符串(7位)和时间戳(base36编码)组成的唯一标识符
     * @description 实现方式：
     * 1. 使用Math.random生成随机字符串（截取小数点后部分）
     * 2. 获取当前时间戳并进行base36编码
     * 3. 组合两者保证不同时间、不同请求的ID唯一性
     */
    private generateMessageId;
    /**
     * 封装打印模块请求数据为统一格式
     * @param module 打印模块标识（固定为"print"）
     * @param data 包含打印机指令和参数的模块消息
     * @returns 符合SendMessage格式的标准请求对象
     * @description 核心功能：
     * 1. 自动生成唯一消息ID保证请求可追踪
     * 2. 标准化打印请求数据结构
     * 3. 保持类型安全的数据封装
     */
    getRequestData<T>(module: "Printer", data: ModuleMessage<T>): SendMessage<T>;
}
