import { Align, ErrorLevel, Rotate } from "enum";
export declare class QrStyle {
    dot: number;
    errorLevel: number;
    symbology: number;
    width: number;
    height: number;
    posX: number;
    posY: number;
    align: number;
    rotate: number;
    constructor();
    /**
     * 设置条码生成块大小
     *
     * @param {number} size
     * @return {*}
     * @memberof QrStyle
     */
    setDot(size: number): this;
    /**
     * 设置条码的纠错等级
     *
     * @param {ErrorLevel} level
     * @return {*}
     * @memberof QrStyle
     */
    setErrorLevel(level: ErrorLevel): this;
    /**
     * 如果设置了宽度将改变生成条码后的范围，缩放为指定宽度
     *
     * @param {number} width
     * @return {*}
     * @memberof QrStyle
     */
    setWidth(width: number): this;
    /**
     * 如果设置了高度将改变生成条码后的范围，缩放为指定高度
     *
     * @param {number} height
     * @return {*}
     * @memberof QrStyle
     */
    setHeight(height: number): this;
    /**
     * 行打印中设置无效
     * 图打印中设置二维码内容的x坐标
     *
     * @param {number} offset
     * @return {*}
     * @memberof QrStyle
     */
    setPosX(offset: number): this;
    /**
     * 行打印中设置无效
     * 图打印中设置二维码内容的y坐标
     *
     * @param {number} offset
     * @return {*}
     * @memberof QrStyle
     */
    setPosY(offset: number): this;
    /**
     * 行打印设置无效
     * 图打印中指定旋转方向
     *
     * @param {Rotate} rotate
     * @return {*}
     * @memberof QrStyle
     */
    setRotate(rotate: Rotate): this;
    /**
     * 行打印可设置基于一行的对齐方式
     * 图打印中指定条码相对坐标的对齐位置
     *
     * @param {Align} align
     * @return {*}
     * @memberof QrStyle
     */
    setAlign(align: Align): this;
    static getStyle(): QrStyle;
}
