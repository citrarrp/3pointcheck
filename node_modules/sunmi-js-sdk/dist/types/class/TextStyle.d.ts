import { Align, RenderColor, Rotate } from "enum";
export declare class TextStyle {
    textSize: number;
    textWidthRatio: number;
    textHeightRatio: number;
    textSpace: number;
    enableUnderline: boolean;
    enableStrikethrough: boolean;
    enableItalics: boolean;
    enableInvert: boolean;
    enableAntiColor: boolean;
    enableBold: boolean;
    customFont: string;
    width: number;
    height: number;
    posX: number;
    posY: number;
    align: number;
    rotate: number;
    renderColor?: number;
    constructor();
    /**
     * 设置文本字体大小（依赖打印机的渲染支持）
     *
     * @param {number} size 设置文字的大小
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setTextSize(size: number): this;
    /**
     * 设置打印文本的横向放大倍数
     *
     * @param {number} ratio
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setTextWidthRatio(ratio: number): this;
    /**
     * 设置打印文本的纵向放大倍数
     *
     * @param {number} ratio
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setTextHeightRatio(ratio: number): this;
    /**
     * 设置文本两边的间距
     *
     * @param {number} space
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setTextSpace(space: number): this;
    /**
     * 设置下划线
     *
     * @param {boolean} enable
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setEnableUnderline(enable: boolean): this;
    /**
     * 设置删除线
     *
     * @param {boolean} enable
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setEnableStrikethrough(enable: boolean): this;
    /**
     * 设置斜体
     *
     * @param {boolean} enable
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setEnableItalics(enable: boolean): this;
    /**
     * 文本倒置
     *
     * @param {boolean} enable
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setEnableInvert(enable: boolean): this;
    /**
     * 文本反显
     *
     * @param {boolean} enable
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setEnableAntiColor(enable: boolean): this;
    /**
     * 文本加粗
     *
     * @param {boolean} enable
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setEnableBold(enable: boolean): this;
    /**
     * 行打印中设置文本内容相对位置
     * 图打印中设置文本内容的x坐标
     *
     * @param {number} offset
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setPosX(offset: number): this;
    /**
     * 行打印中设置无效
     * 图打印中设置文本内容的y坐标
     *
     * @param {number} offset
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setPosY(offset: number): this;
    /**
     * 行打印设置无效
     * 图打印中指定文本内容限制宽度
     *
     * @param {number} width
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setWidth(width: number): this;
    /**
     * 行打印中设置无效
     * 图打印中指定文本内容限制高度
     *
     * @param {number} height
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setHeight(height: number): this;
    /**
     * 行打印仅针对表格时的相对位置
     * 图打印中指定文本相对坐标的对齐位置
     *
     * @param {Align} align
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setAlign(align: Align): this;
    /**
     * 行打印设置无效
     * 图打印中指定文本方向
     *
     * @param {Rotate} rotate
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setRotate(rotate: Rotate): this;
    setFont(customFont: string): this;
    /**
     * 设置字体的颜色
     *
     * @param {RenderColor} renderColor
     * @return {*}  {this}
     * @memberof TextStyle
     */
    setRenderColor(renderColor: RenderColor): this;
    static getStyle(): TextStyle;
}
