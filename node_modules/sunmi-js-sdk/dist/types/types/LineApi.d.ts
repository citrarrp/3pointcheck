import { DividingLine } from "enum";
import { BaseStyle } from "../class/BaseStyle";
import { TextStyle } from "../class/TextStyle";
import { BarcodeStyle } from "../class/BarcodeStyle";
import { QrStyle } from "../class/QrStyle";
import { BitmapStyle } from "../class/BitmapStyle";
interface ILineApi {
    /**
     * 行设置
     * 初始化打印机的行基础样式，这将生效于之后的每一行，可在必要时重新调用此方法来改变之后的每行样式
     *
     * @memberof ILineApi
     */
    initLine: (baseStyle: BaseStyle) => void;
    /**
     * 打印文本内容
     * addText()不会直接打印，通过多次调用addText()并设置不同的TextStyle使一行内容呈现不同效果
     *
     * @memberof ILineApi
     */
    addText: (text: string, textStyle: TextStyle) => void;
    /**
     * 打印文本内容
     * 直接打印出发送的文本内容
     *
     * @memberof ILineApi
     */
    printText: (text: string, textStyle: TextStyle) => void;
    /**
     * 按列排列打印内容
     * 向打印机按列排列发送打印内容，打印的内容为固定大小固定样式内容
     *
     * @memberof ILineApi
     */
    printTexts: (text: string[], colsWidthArr: number[], textStyle: TextStyle[]) => void;
    /**
     * 打印条形码
     * 使打印机打印一枚条形码
     *
     * @memberof ILineApi
     */
    printBarCode: (code: string, barcodeStyle: BarcodeStyle) => void;
    /**
     * 打印二维码
     * 使打印机打印一枚二维码
     *
     * @memberof ILineApi
     */
    printQrCode: (code: string, qrStyle: QrStyle) => void;
    /**
     * 打印图片
     * 使打印机打印一枚图片
     *
     * @memberof ILineApi
     */
    printBitmap: (bitmap: string, bitmapStyle: BitmapStyle) => void;
    /**
     * 打印分割线
     * 使打印机打印不同样式的分割线
     *
     * @memberof ILineApi
     */
    printDividingLine: (dividingLine: DividingLine, offset: number) => void;
    /**
     * 打印结束输出
     * 使打印机在打印内容结束后自动走纸到纸仓口，当打印机有切刀时会自动切纸
     *
     * @memberof ILineApi
     */
    autoOut: () => void;
    /**
     * 事务模式-开关
     * 使打印机开启或关闭事务模式
     * 在开启事务模式后所有行打印命令将缓存执行直到执行事务模式提交
     *
     * @memberof ILineApi
     */
    enableTransMode: (enable: boolean) => void;
    /**
     * 使打印机提交事务
     * 打印机开启事务模式时使用，调用后将顺序执行缓存的行打印命令，这个时候可以通过PrintResult获取这些命令的执行结果
     * resultCode  打印成功将返回0 打印失败将返回非0
     *
     * @memberof ILineApi
     */
    printTrans: (callback: (resultCode: number) => void) => void;
}
export default ILineApi;
