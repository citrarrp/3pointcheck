{"version":3,"file":"bundle.esm.js","sources":["../src/modules/printer.ts","../src/modules/socket.ts","../src/index.ts"],"sourcesContent":["import { IPrinter } from '../types/printer';\n\nclass Printer implements IPrinter {\n  constructor() {\n    console.log(\"Printer module loaded\");\n  }\n\n  helloWorld = () => {\n    console.log(\"Hello, World!\");\n  };\n}\n\nexport default Printer;\n","import { io, Socket } from 'socket.io-client';\nimport { ISocketManager, ISocketConfig } from '../types/socket';\n\nexport class SocketManager implements ISocketManager {\n  private socket: Socket;\n\n  constructor(serverUrl: string = 'localhost:3030') {\n    this.socket = io(serverUrl, {\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    this.initializeEventListeners();\n  }\n\n  private initializeEventListeners() {\n    this.socket.on('connect', () => {\n      console.log('Connected to socket server');\n      this.socket.emit('chat message', { input: '连接成功啦' });\n    });\n\n    this.socket.on('connect_error', (error) => {\n      console.error('Connection error:', error);\n    });\n\n    this.socket.on('disconnect', (reason) => {\n      console.log('Disconnected:', reason);\n    });\n  }\n\n  // 获取socket实例\n  getSocket(): Socket {\n    return this.socket;\n  }\n\n  // 发送消息\n  sendMessage(event: string, data: any): void {\n    this.socket.emit(event, data);\n  }\n\n  // 添加事件监听\n  on(event: string, callback: (...args: any[]) => void): void {\n    this.socket.on(event, callback);\n  }\n\n  // 断开连接\n  disconnect(): void {\n    this.socket.disconnect();\n  }\n}\n","import Printer from \"./modules/printer\";\nimport { SocketManager } from \"./modules/socket\";\nimport type { ISUNMI } from \"./types\";\n\nclass SUNMI implements ISUNMI {\n  printer: Printer;\n  private socketManager: SocketManager;\n\n  constructor() {\n    // 初始化打印模块\n    this.printer = new Printer();\n    \n    // 初始化socket管理器\n    this.socketManager = new SocketManager();\n  }\n\n  // 初始化模块\n  _initModule = () => {\n    // 模式2 指定文件夹加载方式、该模式需要在构建时预先将所有模块一起打包到一个文件内\n  };\n}\n\n// 导出默认实例\nexport default SUNMI;\n\n// 导出类型定义\nexport * from './types';\n"],"names":["Printer","this","helloWorld","console","log","SocketManager","serverUrl","socket","io","transports","reconnection","reconnectionAttempts","reconnectionDelay","initializeEventListeners","prototype","_this","on","emit","input","error","reason","getSocket","sendMessage","event","data","callback","disconnect","SUNMI","_initModule","printer","socketManager"],"mappings":"sCAEA,IAAAA,EACE,WAIAC,KAAAC,WAAa,WACXC,QAAQC,IAAI,gBACd,EALED,QAAQC,IAAI,wBACb,ECFHC,EAAA,WAGE,SAAAA,EAAYC,QAAA,IAAAA,IAAAA,EAAoC,kBAC9CL,KAAKM,OAASC,EAAGF,EAAW,CAC1BG,WAAY,CAAC,aACbC,cAAc,EACdC,qBAAsB,EACtBC,kBAAmB,MAGrBX,KAAKY,0BACN,CAoCH,OAlCUR,EAAAS,UAAAD,yBAAR,WAAA,IAaCE,EAAAd,KAZCA,KAAKM,OAAOS,GAAG,WAAW,WACxBb,QAAQC,IAAI,8BACZW,EAAKR,OAAOU,KAAK,eAAgB,CAAEC,MAAO,SAC5C,IAEAjB,KAAKM,OAAOS,GAAG,iBAAiB,SAACG,GAC/BhB,QAAQgB,MAAM,oBAAqBA,EACrC,IAEAlB,KAAKM,OAAOS,GAAG,cAAc,SAACI,GAC5BjB,QAAQC,IAAI,gBAAiBgB,EAC/B,KAIFf,EAAAS,UAAAO,UAAA,WACE,OAAOpB,KAAKM,QAIdF,EAAAS,UAAAQ,YAAA,SAAYC,EAAeC,GACzBvB,KAAKM,OAAOU,KAAKM,EAAOC,IAI1BnB,EAAAS,UAAAE,GAAA,SAAGO,EAAeE,GAChBxB,KAAKM,OAAOS,GAAGO,EAAOE,IAIxBpB,EAAAS,UAAAY,WAAA,WACEzB,KAAKM,OAAOmB,cAEfrB,CAAD,IC/CAsB,EAIE,WASA1B,KAAA2B,YAAc,WAEd,EATE3B,KAAK4B,QAAU,IAAI7B,EAGnBC,KAAK6B,cAAgB,IAAIzB,CAC1B"}